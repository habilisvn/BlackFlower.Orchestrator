"""
This type stub file was generated by pyright.
"""

from mongoengine.errors import InvalidQueryError

__all__ = ("Q", "QNode")
def warn_empty_is_deprecated(): # -> None:
    ...

class QNodeVisitor:
    """Base visitor class for visiting Q-object nodes in a query tree."""
    def visit_combination(self, combination):
        """Called by QCombination objects."""
        ...
    
    def visit_query(self, query):
        """Called by (New)Q objects."""
        ...
    


class DuplicateQueryConditionsError(InvalidQueryError):
    ...


class SimplificationVisitor(QNodeVisitor):
    """Simplifies query trees by combining unnecessary 'and' connection nodes
    into a single Q-object.
    """
    def visit_combination(self, combination): # -> Q:
        ...
    


class QueryCompilerVisitor(QNodeVisitor):
    """Compiles the nodes in a query tree to a PyMongo-compatible query
    dictionary.
    """
    def __init__(self, document) -> None:
        ...
    
    def visit_combination(self, combination): # -> dict[str, Any]:
        ...
    
    def visit_query(self, query):
        ...
    


class QNode:
    """Base class for nodes in query trees."""
    AND = ...
    OR = ...
    def to_query(self, document):
        ...
    
    def accept(self, visitor):
        ...
    
    @property
    def empty(self): # -> Literal[False]:
        ...
    
    def __or__(self, other): # -> Self | QCombination:
        ...
    
    def __and__(self, other): # -> Self | QCombination:
        ...
    


class QCombination(QNode):
    """Represents the combination of several conditions by a given
    logical operator.
    """
    def __init__(self, operation, children) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __bool__(self): # -> bool:
        ...
    
    def accept(self, visitor):
        ...
    
    @property
    def empty(self): # -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class Q(QNode):
    """A simple query object, used in a query tree to build up more complex
    query structures.
    """
    def __init__(self, **query) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __bool__(self): # -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def accept(self, visitor):
        ...
    
    @property
    def empty(self): # -> bool:
        ...
    


