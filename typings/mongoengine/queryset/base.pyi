"""
This type stub file was generated by pyright.
"""

__all__ = ("BaseQuerySet", "DO_NOTHING", "NULLIFY", "CASCADE", "DENY", "PULL")
DO_NOTHING = ...
NULLIFY = ...
CASCADE = ...
DENY = ...
PULL = ...
class BaseQuerySet:
    """A set of results returned from a query. Wraps a MongoDB cursor,
    providing :class:`~mongoengine.Document` objects as the results.
    """
    def __init__(self, document, collection) -> None:
        ...
    
    def __call__(self, q_obj=..., **query): # -> BaseQuerySet:
        """Filter the selected documents by calling the
        :class:`~mongoengine.queryset.QuerySet` with a query.

        :param q_obj: a :class:`~mongoengine.queryset.Q` object to be used in
            the query; the :class:`~mongoengine.queryset.QuerySet` is filtered
            multiple times with different :class:`~mongoengine.queryset.Q`
            objects, only the last one will be used.
        :param query: Django-style query keyword arguments.
        """
        ...
    
    def __getstate__(self): # -> dict[str, Any]:
        """
        Need for pickling queryset

        See https://github.com/MongoEngine/mongoengine/issues/442
        """
        ...
    
    def __setstate__(self, obj_dict): # -> None:
        """
        Need for pickling queryset

        See https://github.com/MongoEngine/mongoengine/issues/442
        """
        ...
    
    def __getitem__(self, key): # -> BaseQuerySet | Any | tuple[Any, ...]:
        """Return a document instance corresponding to a given index if
        the key is an integer. If the key is a slice, translate its
        bounds into a skip and a limit, and return a cloned queryset
        with that skip/limit applied. For example:

        >>> User.objects[0]
        <User: User object>
        >>> User.objects[1:3]
        [<User: User object>, <User: User object>]
        """
        ...
    
    def __iter__(self):
        ...
    
    def __bool__(self): # -> bool:
        """Avoid to open all records in an if stmt in Py3."""
        ...
    
    def all(self): # -> BaseQuerySet:
        """Returns a copy of the current QuerySet."""
        ...
    
    def filter(self, *q_objs, **query): # -> BaseQuerySet:
        """An alias of :meth:`~mongoengine.queryset.QuerySet.__call__`"""
        ...
    
    def search_text(self, text, language=..., text_score=...): # -> BaseQuerySet:
        """
        Start a text search, using text indexes.
        Require: MongoDB server version 2.6+.

        :param language:  The language that determines the list of stop words
            for the search and the rules for the stemmer and tokenizer.
            If not specified, the search uses the default language of the index.
            For supported languages, see
            `Text Search Languages <https://docs.mongodb.org/manual/reference/text-search-languages/#text-search-languages>`.
        :param text_score:  True to have it return the text_score (available through get_text_score()), False to disable that
            Note that unless you order the results, leaving text_score=True may provide randomness in the returned documents
        """
        ...
    
    def get(self, *q_objs, **query): # -> Any | tuple[Any, ...]:
        """Retrieve the matching object raising
        :class:`~mongoengine.queryset.MultipleObjectsReturned` or
        `DocumentName.MultipleObjectsReturned` exception if multiple results
        and :class:`~mongoengine.queryset.DoesNotExist` or
        `DocumentName.DoesNotExist` if no results are found.
        """
        ...
    
    def create(self, **kwargs):
        """Create new object. Returns the saved object instance."""
        ...
    
    def first(self): # -> BaseQuerySet | Any | tuple[Any, ...] | None:
        """Retrieve the first object matching the query."""
        ...
    
    def insert(self, doc_or_docs, load_bulk=..., write_concern=..., signal_kwargs=...): # -> list[Any] | list[Any | None] | None:
        """bulk insert documents

        :param doc_or_docs: a document or list of documents to be inserted
        :param load_bulk (optional): If True returns the list of document
            instances
        :param write_concern: Extra keyword arguments are passed down to
                :meth:`~pymongo.collection.Collection.insert`
                which will be used as options for the resultant
                ``getLastError`` command.  For example,
                ``insert(..., {w: 2, fsync: True})`` will wait until at least
                two servers have recorded the write and will force an fsync on
                each server being written to.
        :param signal_kwargs: (optional) kwargs dictionary to be passed to
            the signal calls.

        By default returns document instances, set ``load_bulk`` to False to
        return just ``ObjectIds``
        """
        ...
    
    def count(self, with_limit_and_skip=...): # -> Any | Literal[0]:
        """Count the selected elements in the query.

        :param with_limit_and_skip (optional): take any :meth:`limit` or
            :meth:`skip` that has been applied to this cursor into account when
            getting the count
        """
        ...
    
    def delete(self, write_concern=..., _from_doc_delete=..., cascade_refs=...): # -> int | None:
        """Delete the documents matched by the query.

        :param write_concern: Extra keyword arguments are passed down which
            will be used as options for the resultant
            ``getLastError`` command.  For example,
            ``save(..., write_concern={w: 2, fsync: True}, ...)`` will
            wait until at least two servers have recorded the write and
            will force an fsync on the primary server.
        :param _from_doc_delete: True when called from document delete therefore
            signals will have been triggered so don't loop.

        :returns number of deleted documents
        """
        ...
    
    def update(self, upsert=..., multi=..., write_concern=..., read_concern=..., full_result=..., array_filters=..., **update): # -> Literal[0] | None:
        """Perform an atomic update on the fields matched by the query.

        :param upsert: insert if document doesn't exist (default ``False``)
        :param multi: Update multiple documents.
        :param write_concern: Extra keyword arguments are passed down which
            will be used as options for the resultant
            ``getLastError`` command.  For example,
            ``save(..., write_concern={w: 2, fsync: True}, ...)`` will
            wait until at least two servers have recorded the write and
            will force an fsync on the primary server.
        :param read_concern: Override the read concern for the operation
        :param full_result: Return the associated ``pymongo.UpdateResult`` rather than just the number
            updated items
        :param array_filters: A list of filters specifying which array elements an update should apply.
        :param update: Django-style update keyword arguments

        :returns the number of updated documents (unless ``full_result`` is True)
        """
        ...
    
    def upsert_one(self, write_concern=..., read_concern=..., **update): # -> Any | tuple[Any, ...]:
        """Overwrite or add the first document matched by the query.

        :param write_concern: Extra keyword arguments are passed down which
            will be used as options for the resultant
            ``getLastError`` command.  For example,
            ``save(..., write_concern={w: 2, fsync: True}, ...)`` will
            wait until at least two servers have recorded the write and
            will force an fsync on the primary server.
        :param read_concern: Override the read concern for the operation
        :param update: Django-style update keyword arguments

        :returns the new or overwritten document
        """
        ...
    
    def update_one(self, upsert=..., write_concern=..., full_result=..., array_filters=..., **update): # -> Literal[0] | None:
        """Perform an atomic update on the fields of the first document
        matched by the query.

        :param upsert: insert if document doesn't exist (default ``False``)
        :param write_concern: Extra keyword arguments are passed down which
            will be used as options for the resultant
            ``getLastError`` command.  For example,
            ``save(..., write_concern={w: 2, fsync: True}, ...)`` will
            wait until at least two servers have recorded the write and
            will force an fsync on the primary server.
        :param full_result: Return the associated ``pymongo.UpdateResult`` rather than just the number
            updated items
        :param array_filters: A list of filters specifying which array elements an update should apply.
        :param update: Django-style update keyword arguments
            full_result
        :returns the number of updated documents (unless ``full_result`` is True)
        """
        ...
    
    def modify(self, upsert=..., full_response=..., remove=..., new=..., array_filters=..., **update):
        """Update and return the updated document.

        Returns either the document before or after modification based on `new`
        parameter. If no documents match the query and `upsert` is false,
        returns ``None``. If upserting and `new` is false, returns ``None``.

        If the full_response parameter is ``True``, the return value will be
        the entire response object from the server, including the 'ok' and
        'lastErrorObject' fields, rather than just the modified document.
        This is useful mainly because the 'lastErrorObject' document holds
        information about the command's execution.

        :param upsert: insert if document doesn't exist (default ``False``)
        :param full_response: return the entire response object from the
            server (default ``False``, not available for PyMongo 3+)
        :param remove: remove rather than updating (default ``False``)
        :param new: return updated rather than original document
            (default ``False``)
        :param array_filters: A list of filters specifying which array elements an update should apply.
        :param update: Django-style update keyword arguments
        """
        ...
    
    def with_id(self, object_id): # -> BaseQuerySet | Any | tuple[Any, ...] | None:
        """Retrieve the object matching the id provided.  Uses `object_id` only
        and raises InvalidQueryError if a filter has been applied. Returns
        `None` if no document exists with that id.

        :param object_id: the value for the id of the document to look up
        """
        ...
    
    def in_bulk(self, object_ids): # -> dict[Any, Any]:
        """Retrieve a set of documents by their ids.

        :param object_ids: a list or tuple of ObjectId's
        :rtype: dict of ObjectId's as keys and collection-specific
                Document subclasses as values.
        """
        ...
    
    def none(self): # -> BaseQuerySet:
        """Returns a queryset that never returns any objects and no query will be executed when accessing the results
        inspired by django none() https://docs.djangoproject.com/en/dev/ref/models/querysets/#none
        """
        ...
    
    def no_sub_classes(self): # -> Self:
        """Filter for only the instances of this specific document.

        Do NOT return any inherited documents.
        """
        ...
    
    def using(self, alias): # -> BaseQuerySet:
        """This method is for controlling which database the QuerySet will be
        evaluated against if you are using more than one database.

        :param alias: The database alias
        """
        ...
    
    def clone(self): # -> BaseQuerySet:
        """Create a copy of the current queryset."""
        ...
    
    def select_related(self, max_depth=...):
        """Handles dereferencing of :class:`~bson.dbref.DBRef` objects or
        :class:`~bson.object_id.ObjectId` a maximum depth in order to cut down
        the number queries to mongodb.
        """
        ...
    
    def limit(self, n): # -> BaseQuerySet:
        """Limit the number of returned documents to `n`. This may also be
        achieved using array-slicing syntax (e.g. ``User.objects[:5]``).

        :param n: the maximum number of objects to return if n is greater than 0.
        When 0 is passed, returns all the documents in the cursor
        """
        ...
    
    def skip(self, n): # -> BaseQuerySet:
        """Skip `n` documents before returning the results. This may also be
        achieved using array-slicing syntax (e.g. ``User.objects[5:]``).

        :param n: the number of objects to skip before returning results
        """
        ...
    
    def hint(self, index=...): # -> BaseQuerySet:
        """Added 'hint' support, telling Mongo the proper index to use for the
        query.

        Judicious use of hints can greatly improve query performance. When
        doing a query on multiple fields (at least one of which is indexed)
        pass the indexed field as a hint to the query.

        Hinting will not do anything if the corresponding index does not exist.
        The last hint applied to this cursor takes precedence over all others.
        """
        ...
    
    def collation(self, collation=...): # -> BaseQuerySet:
        """
        Collation allows users to specify language-specific rules for string
        comparison, such as rules for lettercase and accent marks.
        :param collation: `~pymongo.collation.Collation` or dict with
        following fields:
            {
                locale: str,
                caseLevel: bool,
                caseFirst: str,
                strength: int,
                numericOrdering: bool,
                alternate: str,
                maxVariable: str,
                backwards: str
            }
        Collation should be added to indexes like in test example
        """
        ...
    
    def batch_size(self, size): # -> BaseQuerySet:
        """Limit the number of documents returned in a single batch (each
        batch requires a round trip to the server).

        See https://pymongo.readthedocs.io/en/stable/api/pymongo/cursor.html#pymongo.cursor.Cursor
        for details.

        :param size: desired size of each batch.
        """
        ...
    
    def distinct(self, field): # -> list[Any]:
        """Return a list of distinct values for a given field.

        :param field: the field to select distinct values from

        .. note:: This is a command and won't take ordering or limit into
           account.
        """
        ...
    
    def only(self, *fields): # -> BaseQuerySet:
        """Load only a subset of this document's fields. ::

            post = BlogPost.objects(...).only('title', 'author.name')

        .. note :: `only()` is chainable and will perform a union ::
            So with the following it will fetch both: `title` and `author.name`::

                post = BlogPost.objects.only('title').only('author.name')

        :func:`~mongoengine.queryset.QuerySet.all_fields` will reset any
        field filters.

        :param fields: fields to include
        """
        ...
    
    def exclude(self, *fields): # -> BaseQuerySet:
        """Opposite to .only(), exclude some document's fields. ::

            post = BlogPost.objects(...).exclude('comments')

        .. note :: `exclude()` is chainable and will perform a union ::
            So with the following it will exclude both: `title` and `author.name`::

                post = BlogPost.objects.exclude('title').exclude('author.name')

        :func:`~mongoengine.queryset.QuerySet.all_fields` will reset any
        field filters.

        :param fields: fields to exclude
        """
        ...
    
    def fields(self, _only_called=..., **kwargs): # -> BaseQuerySet:
        """Manipulate how you load this document's fields. Used by `.only()`
        and `.exclude()` to manipulate which fields to retrieve. If called
        directly, use a set of kwargs similar to the MongoDB projection
        document. For example:

        Include only a subset of fields:

            posts = BlogPost.objects(...).fields(author=1, title=1)

        Exclude a specific field:

            posts = BlogPost.objects(...).fields(comments=0)

        To retrieve a subrange or sublist of array elements,
        support exist for both the `slice` and `elemMatch` projection operator:

            posts = BlogPost.objects(...).fields(slice__comments=5)
            posts = BlogPost.objects(...).fields(elemMatch__comments="test")

        :param kwargs: A set of keyword arguments identifying what to
            include, exclude, or slice.
        """
        ...
    
    def all_fields(self): # -> BaseQuerySet:
        """Include all fields. Reset all previously calls of .only() or
        .exclude(). ::

            post = BlogPost.objects.exclude('comments').all_fields()
        """
        ...
    
    def order_by(self, *keys, __raw__=...): # -> BaseQuerySet:
        """Order the :class:`~mongoengine.queryset.QuerySet` by the given keys.

        The order may be specified by prepending each of the keys by a "+" or
        a "-". Ascending order is assumed if there's no prefix.

        If no keys are passed, existing ordering is cleared instead.

        :param keys: fields to order the query results by; keys may be
            prefixed with "+" or a "-" to determine the ordering direction.
        :param __raw__: a raw pymongo "sort" argument (provided as a list of (key, direction))
            see 'key_or_list' in `pymongo.cursor.Cursor.sort doc <https://pymongo.readthedocs.io/en/stable/api/pymongo/cursor.html#pymongo.cursor.Cursor.sort>`.
            If both keys and __raw__ are provided, an exception is raised
        """
        ...
    
    def clear_cls_query(self): # -> BaseQuerySet:
        """Clear the default "_cls" query.

        By default, all queries generated for documents that allow inheritance
        include an extra "_cls" clause. In most cases this is desirable, but
        sometimes you might achieve better performance if you clear that
        default query.

        Scan the code for `_cls_query` to get more details.
        """
        ...
    
    def comment(self, text): # -> BaseQuerySet:
        """Add a comment to the query.

        See https://www.mongodb.com/docs/manual/reference/method/cursor.comment/
        for details.
        """
        ...
    
    def explain(self):
        """Return an explain plan record for the
        :class:`~mongoengine.queryset.QuerySet` cursor.
        """
        ...
    
    def snapshot(self, enabled): # -> BaseQuerySet:
        """Enable or disable snapshot mode when querying.

        :param enabled: whether or not snapshot mode is enabled
        """
        ...
    
    def allow_disk_use(self, enabled): # -> BaseQuerySet:
        """Enable or disable the use of temporary files on disk while processing a blocking sort operation.
         (To store data exceeding the 100 megabyte system memory limit)

        :param enabled: whether or not temporary files on disk are used
        """
        ...
    
    def timeout(self, enabled): # -> BaseQuerySet:
        """Enable or disable the default mongod timeout when querying. (no_cursor_timeout option)

        :param enabled: whether or not the timeout is used
        """
        ...
    
    def read_preference(self, read_preference): # -> BaseQuerySet:
        """Change the read_preference when querying.

        :param read_preference: override ReplicaSetConnection-level
            preference.
        """
        ...
    
    def read_concern(self, read_concern): # -> BaseQuerySet:
        """Change the read_concern when querying.

        :param read_concern: override ReplicaSetConnection-level
            preference.
        """
        ...
    
    def scalar(self, *fields): # -> BaseQuerySet:
        """Instead of returning Document instances, return either a specific
        value or a tuple of values in order.

        Can be used along with
        :func:`~mongoengine.queryset.QuerySet.no_dereference` to turn off
        dereferencing.

        .. note:: This effects all results and can be unset by calling
                  ``scalar`` without arguments. Calls ``only`` automatically.

        :param fields: One or more fields to return instead of a Document.
        """
        ...
    
    def values_list(self, *fields): # -> BaseQuerySet:
        """An alias for scalar"""
        ...
    
    def as_pymongo(self): # -> BaseQuerySet:
        """Instead of returning Document instances, return raw values from
        pymongo.

        This method is particularly useful if you don't need dereferencing
        and care primarily about the speed of data retrieval.
        """
        ...
    
    def max_time_ms(self, ms): # -> BaseQuerySet:
        """Wait `ms` milliseconds before killing the query on the server

        :param ms: the number of milliseconds before killing the query on the server
        """
        ...
    
    def to_json(self, *args, **kwargs): # -> str:
        """Converts a queryset to JSON"""
        ...
    
    def from_json(self, json_data): # -> list[Any]:
        """Converts json data to unsaved objects"""
        ...
    
    def aggregate(self, pipeline, *suppl_pipeline, **kwargs):
        """Perform an aggregate function based on your queryset params

        :param pipeline: list of aggregation commands,
            see: https://www.mongodb.com/docs/manual/core/aggregation-pipeline/
        :param suppl_pipeline: unpacked list of pipeline (added to support deprecation of the old interface)
            parameter will be removed shortly
        :param kwargs: (optional) kwargs dictionary to be passed to pymongo's aggregate call
            See https://pymongo.readthedocs.io/en/stable/api/pymongo/collection.html#pymongo.collection.Collection.aggregate
        """
        ...
    
    def map_reduce(self, map_f, reduce_f, output, finalize_f=..., limit=..., scope=...): # -> Generator[Any, Any, None]:
        """Perform a map/reduce query using the current query spec
        and ordering. While ``map_reduce`` respects ``QuerySet`` chaining,
        it must be the last call made, as it does not return a maleable
        ``QuerySet``.

        See the :meth:`~mongoengine.tests.QuerySetTest.test_map_reduce`
        and :meth:`~mongoengine.tests.QuerySetTest.test_map_advanced`
        tests in ``tests.queryset.QuerySetTest`` for usage examples.

        :param map_f: map function, as :class:`~bson.code.Code` or string
        :param reduce_f: reduce function, as
                         :class:`~bson.code.Code` or string
        :param output: output collection name, if set to 'inline' will return
           the results inline. This can also be a dictionary containing output options
           see: https://www.mongodb.com/docs/manual/reference/command/mapReduce/#mongodb-dbcommand-dbcmd.mapReduce
        :param finalize_f: finalize function, an optional function that
                           performs any post-reduction processing.
        :param scope: values to insert into map/reduce global scope. Optional.
        :param limit: number of objects from current query to provide
                      to map/reduce method

        Returns an iterator yielding
        :class:`~mongoengine.document.MapReduceDocument`.
        """
        ...
    
    def exec_js(self, code, *fields, **options):
        """Execute a Javascript function on the server. A list of fields may be
        provided, which will be translated to their correct names and supplied
        as the arguments to the function. A few extra variables are added to
        the function's scope: ``collection``, which is the name of the
        collection in use; ``query``, which is an object representing the
        current query; and ``options``, which is an object containing any
        options specified as keyword arguments.

        As fields in MongoEngine may use different names in the database (set
        using the :attr:`db_field` keyword argument to a :class:`Field`
        constructor), a mechanism exists for replacing MongoEngine field names
        with the database field names in Javascript code. When accessing a
        field, use square-bracket notation, and prefix the MongoEngine field
        name with a tilde (~).

        :param code: a string of Javascript code to execute
        :param fields: fields that you will be using in your function, which
            will be passed in to your function as arguments
        :param options: options that you want available to the function
            (accessed in Javascript through the ``options`` object)
        """
        ...
    
    def where(self, where_clause): # -> BaseQuerySet:
        """Filter ``QuerySet`` results with a ``$where`` clause (a Javascript
        expression). Performs automatic field name substitution like
        :meth:`mongoengine.queryset.Queryset.exec_js`.

        .. note:: When using this mode of query, the database will call your
                  function, or evaluate your predicate clause, for each object
                  in the collection.
        """
        ...
    
    def sum(self, field): # -> Literal[0]:
        """Sum over the values of the specified field.

        :param field: the field to sum over; use dot notation to refer to
            embedded document fields
        """
        ...
    
    def average(self, field): # -> Literal[0]:
        """Average over the values of the specified field.

        :param field: the field to average over; use dot notation to refer to
            embedded document fields
        """
        ...
    
    def item_frequencies(self, field, normalize=..., map_reduce=...): # -> dict[Any, float] | dict[Any, Any]:
        """Returns a dictionary of all items present in a field across
        the whole queried set of documents, and their corresponding frequency.
        This is useful for generating tag clouds, or searching documents.

        .. note::

            Can only do direct simple mappings and cannot map across
            :class:`~mongoengine.fields.ReferenceField` or
            :class:`~mongoengine.fields.GenericReferenceField` for more complex
            counting a manual map reduce call is required.

        If the field is a :class:`~mongoengine.fields.ListField`, the items within
        each list will be counted individually.

        :param field: the field to use
        :param normalize: normalize the results so they add to 1.0
        :param map_reduce: Use map_reduce over exec_js
        """
        ...
    
    def __next__(self): # -> Any | tuple[Any, ...]:
        """Wrap the result in a :class:`~mongoengine.Document` object."""
        ...
    
    def rewind(self): # -> None:
        """Rewind the cursor to its unevaluated state."""
        ...
    
    def __deepcopy__(self, memo): # -> BaseQuerySet:
        """Essential for chained queries with ReferenceFields involved"""
        ...
    
    def no_dereference(self): # -> BaseQuerySet:
        """Turn off any dereferencing for the results of this queryset."""
        ...
    


