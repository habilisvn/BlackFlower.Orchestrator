"""
This type stub file was generated by pyright.
"""

from mongoengine.queryset.base import BaseQuerySet

__all__ = ("QuerySet", "QuerySetNoCache", "DO_NOTHING", "NULLIFY", "CASCADE", "DENY", "PULL")
REPR_OUTPUT_SIZE = ...
ITER_CHUNK_SIZE = ...
class QuerySet(BaseQuerySet):
    """The default queryset, that builds queries and handles a set of results
    returned from a query.

    Wraps a MongoDB cursor, providing :class:`~mongoengine.Document` objects as
    the results.
    """
    _has_more = ...
    _len = ...
    _result_cache = ...
    def __iter__(self): # -> Generator[Any, Any, None]:
        """Iteration utilises a results cache which iterates the cursor
        in batches of ``ITER_CHUNK_SIZE``.

        If ``self._has_more`` the cursor hasn't been exhausted so cache then
        batch. Otherwise iterate the result_cache.
        """
        ...
    
    def __len__(self): # -> int | Any:
        """Since __len__ is called quite frequently (for example, as part of
        list(qs)), we populate the result cache and cache the length.
        """
        ...
    
    def __repr__(self): # -> str:
        """Provide a string representation of the QuerySet"""
        ...
    
    def count(self, with_limit_and_skip=...): # -> Any | int:
        """Count the selected elements in the query.

        :param with_limit_and_skip (optional): take any :meth:`limit` or
            :meth:`skip` that has been applied to this cursor into account when
            getting the count
        """
        ...
    
    def no_cache(self): # -> BaseQuerySet:
        """Convert to a non-caching queryset"""
        ...
    


class QuerySetNoCache(BaseQuerySet):
    """A non caching QuerySet"""
    def cache(self): # -> BaseQuerySet:
        """Convert to a caching queryset"""
        ...
    
    def __repr__(self): # -> str:
        """Provides the string representation of the QuerySet"""
        ...
    
    def __iter__(self): # -> BaseQuerySet | Self:
        ...
    


