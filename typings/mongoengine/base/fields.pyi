"""
This type stub file was generated by pyright.
"""

__all__ = ("BaseField", "ComplexBaseField", "ObjectIdField", "GeoJsonBaseField")
class BaseField:
    """A base class for fields in a MongoDB document. Instances of this class
    may be added to subclasses of `Document` to define a document's schema.
    """
    name = ...
    _geo_index = ...
    _auto_gen = ...
    _thread_local_storage = ...
    creation_counter = ...
    auto_creation_counter = ...
    def __init__(self, db_field=..., required=..., default=..., unique=..., unique_with=..., primary_key=..., validation=..., choices=..., null=..., sparse=..., **kwargs) -> None:
        """
        :param db_field: The database field to store this field in
            (defaults to the name of the field)
        :param required: If the field is required. Whether it has to have a
            value or not. Defaults to False.
        :param default: (optional) The default value for this field if no value
            has been set, if the value is set to None or has been unset. It can be a
            callable.
        :param unique: Is the field value unique or not (Creates an index).  Defaults to False.
        :param unique_with: (optional) The other field this field should be
            unique with (Creates an index).
        :param primary_key: Mark this field as the primary key ((Creates an index)). Defaults to False.
        :param validation: (optional) A callable to validate the value of the
            field. The callable takes the value as parameter and should raise
            a ValidationError if validation fails
        :param choices: (optional) The valid choices
        :param null: (optional) If the field value can be null when a default exists. If not set, the default value
            will be used in case a field with a default value is set to None. Defaults to False.
        :param sparse: (optional) `sparse=True` combined with `unique=True` and `required=False`
            means that uniqueness won't be enforced for `None` values (Creates an index). Defaults to False.
        :param **kwargs: (optional) Arbitrary indirection-free metadata for
            this field can be supplied as additional keyword arguments and
            accessed as attributes of the field. Must not conflict with any
            existing attributes. Common metadata includes `verbose_name` and
            `help_text`.
        """
        ...
    
    def set_auto_dereferencing(self, value): # -> None:
        ...
    
    def __get__(self, instance, owner): # -> Self:
        """Descriptor for retrieving a value from a field in a document."""
        ...
    
    def __set__(self, instance, value): # -> None:
        """Descriptor for assigning a value to a field in a document."""
        ...
    
    def error(self, message=..., errors=..., field_name=...):
        """Raise a ValidationError."""
        ...
    
    def to_python(self, value):
        """Convert a MongoDB-compatible type to a Python type."""
        ...
    
    def to_mongo(self, value):
        """Convert a Python type to a MongoDB-compatible type."""
        ...
    
    def prepare_query_value(self, op, value):
        """Prepare a value that is being used in a query for PyMongo."""
        ...
    
    def validate(self, value, clean=...): # -> None:
        """Perform validation on a value."""
        ...
    
    @property
    def owner_document(self): # -> None:
        ...
    
    @owner_document.setter
    def owner_document(self, owner_document): # -> None:
        ...
    


class ComplexBaseField(BaseField):
    """Handles complex fields, such as lists / dictionaries.

    Allows for nesting of embedded documents inside complex types.
    Handles the lazy dereferencing of a queryset by lazily dereferencing all
    items in a list / dict rather than one at a time.
    """
    def __init__(self, field=..., **kwargs) -> None:
        ...
    
    def __set__(self, instance, value): # -> None:
        ...
    
    def __get__(self, instance, owner): # -> Self | EmbeddedDocumentList | BaseList | BaseDict | ComplexBaseField:
        """Descriptor to automatically dereference references."""
        ...
    
    def to_python(self, value): # -> str | list[Any] | dict[int | Any, Any]:
        """Convert a MongoDB-compatible type to a Python type."""
        ...
    
    def to_mongo(self, value, use_db_field=..., fields=...): # -> str | list[Any] | dict[int | Any, Any]:
        """Convert a Python type to a MongoDB-compatible type."""
        ...
    
    def validate(self, value): # -> None:
        """If field is provided ensure the value is valid."""
        ...
    
    def prepare_query_value(self, op, value): # -> str | list[Any] | dict[int | Any, Any]:
        ...
    
    def lookup_member(self, member_name): # -> None:
        ...
    


class ObjectIdField(BaseField):
    """A field wrapper around MongoDB's ObjectIds."""
    def to_python(self, value): # -> ObjectId:
        ...
    
    def to_mongo(self, value): # -> ObjectId | None:
        ...
    
    def prepare_query_value(self, op, value): # -> ObjectId | None:
        ...
    
    def validate(self, value): # -> None:
        ...
    


class GeoJsonBaseField(BaseField):
    """A geo json field storing a geojson style object."""
    _geo_index = ...
    _type = ...
    def __init__(self, auto_index=..., *args, **kwargs) -> None:
        """
        :param bool auto_index: Automatically create a '2dsphere' index.\
            Defaults to `True`.
        """
        ...
    
    def validate(self, value): # -> None:
        """Validate the GeoJson object based on its type."""
        ...
    
    def to_mongo(self, value): # -> dict[Any, Any] | SON[str, str]:
        ...
    


